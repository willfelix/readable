{"ast":null,"code":"import _objectSpread from \"/Users/willfelix/Documents/code/study/projects-udacity-nanodegree/readable/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport { GET_POST, GET_POSTS, SORT_POST, VOTE_POST, DELETE_POST, CREATE_POST, UPDATE_POST } from '../actions/posts';\n\nvar sort = function sort() {\n  var sortBy = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'timestamp';\n  var arr = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  return arr.sort(function (p, b) {\n    return p[sortBy] - b[sortBy];\n  });\n};\n\nvar clone = function clone(obj) {\n  return JSON.parse(JSON.stringify(obj));\n};\n\nexport default function posts() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case GET_POST:\n      return {\n        post: action.post\n      };\n\n    case GET_POSTS:\n      var get_posts = sort(action.sortBy, action.posts);\n      return _objectSpread({}, get_posts);\n\n    case DELETE_POST:\n      return _objectSpread({}, Object.values(state).flat().filter(function (s) {\n        return s.id !== action.id;\n      }));\n\n    case CREATE_POST:\n      var create_posts = sort(action.sortBy, Object.values(state).concat(action.post));\n      return _objectSpread({}, create_posts);\n\n    case UPDATE_POST:\n      var updated_posts = sort(action.sortBy, Object.values(state).filter(function (p) {\n        return p.id !== action.post.id;\n      }).concat(action.post));\n      return _objectSpread({}, updated_posts);\n\n    case VOTE_POST:\n      var arrState = sort('timestamp', Object.values(clone(state)));\n      arrState.forEach(function (p) {\n        if (p.id === action.id) {\n          p.voteScore += action.vote === 'upVote' ? 1 : -1;\n        }\n      });\n      return _objectSpread({}, arrState);\n\n    case SORT_POST:\n      var sort_posts = sort(action.sortBy, Object.values(clone(state)));\n      return _objectSpread({}, sort_posts);\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["/Users/willfelix/Documents/code/study/projects-udacity-nanodegree/readable/frontend/src/reducers/posts.js"],"names":["GET_POST","GET_POSTS","SORT_POST","VOTE_POST","DELETE_POST","CREATE_POST","UPDATE_POST","sort","sortBy","arr","p","b","clone","obj","JSON","parse","stringify","posts","state","action","type","post","get_posts","Object","values","flat","filter","s","id","create_posts","concat","updated_posts","arrState","forEach","voteScore","vote","sort_posts"],"mappings":";AAAA,SAASA,QAAT,EAAmBC,SAAnB,EAA8BC,SAA9B,EAAyCC,SAAzC,EAAoDC,WAApD,EAAiEC,WAAjE,EAA8EC,WAA9E,QAAiG,kBAAjG;;AAEA,IAAMC,IAAI,GAAG,SAAPA,IAAO;AAAA,MAACC,MAAD,uEAAU,WAAV;AAAA,MAAuBC,GAAvB,uEAA6B,EAA7B;AAAA,SAAsCA,GAAG,CAACF,IAAJ,CAAS,UAACG,CAAD,EAAIC,CAAJ;AAAA,WAAUD,CAAC,CAACF,MAAD,CAAD,GAAYG,CAAC,CAACH,MAAD,CAAvB;AAAA,GAAT,CAAtC;AAAA,CAAb;;AACA,IAAMI,KAAK,GAAG,SAARA,KAAQ,CAAAC,GAAG;AAAA,SAAIC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,SAAL,CAAeH,GAAf,CAAX,CAAJ;AAAA,CAAjB;;AAEA,eAAe,SAASI,KAAT,GAAoC;AAAA,MAApBC,KAAoB,uEAAZ,EAAY;AAAA,MAARC,MAAQ;;AACjD,UAAOA,MAAM,CAACC,IAAd;AAEE,SAAKpB,QAAL;AACE,aAAO;AAAEqB,QAAAA,IAAI,EAAEF,MAAM,CAACE;AAAf,OAAP;;AAEF,SAAKpB,SAAL;AACE,UAAMqB,SAAS,GAAGf,IAAI,CAACY,MAAM,CAACX,MAAR,EAAgBW,MAAM,CAACF,KAAvB,CAAtB;AACA,+BAAYK,SAAZ;;AAEF,SAAKlB,WAAL;AACE,+BAAYmB,MAAM,CAACC,MAAP,CAAcN,KAAd,EAAqBO,IAArB,GAA4BC,MAA5B,CAAmC,UAAAC,CAAC;AAAA,eAAIA,CAAC,CAACC,EAAF,KAAST,MAAM,CAACS,EAApB;AAAA,OAApC,CAAZ;;AAEF,SAAKvB,WAAL;AACE,UAAMwB,YAAY,GAAGtB,IAAI,CAACY,MAAM,CAACX,MAAR,EAAgBe,MAAM,CAACC,MAAP,CAAcN,KAAd,EAAqBY,MAArB,CAA4BX,MAAM,CAACE,IAAnC,CAAhB,CAAzB;AACA,+BAAYQ,YAAZ;;AAEF,SAAKvB,WAAL;AACE,UAAMyB,aAAa,GAAGxB,IAAI,CAACY,MAAM,CAACX,MAAR,EAAgBe,MAAM,CAACC,MAAP,CAAcN,KAAd,EAAqBQ,MAArB,CAA4B,UAAAhB,CAAC;AAAA,eAAIA,CAAC,CAACkB,EAAF,KAAST,MAAM,CAACE,IAAP,CAAYO,EAAzB;AAAA,OAA7B,EAA0DE,MAA1D,CAAiEX,MAAM,CAACE,IAAxE,CAAhB,CAA1B;AACA,+BAAYU,aAAZ;;AAEF,SAAK5B,SAAL;AACE,UAAI6B,QAAQ,GAAGzB,IAAI,CAAC,WAAD,EAAcgB,MAAM,CAACC,MAAP,CAAcZ,KAAK,CAACM,KAAD,CAAnB,CAAd,CAAnB;AACAc,MAAAA,QAAQ,CAACC,OAAT,CAAiB,UAAAvB,CAAC,EAAI;AACpB,YAAIA,CAAC,CAACkB,EAAF,KAAST,MAAM,CAACS,EAApB,EAAwB;AACtBlB,UAAAA,CAAC,CAACwB,SAAF,IAAef,MAAM,CAACgB,IAAP,KAAgB,QAAhB,GAA2B,CAA3B,GAA+B,CAAC,CAA/C;AACD;AACF,OAJD;AAMA,+BAAYH,QAAZ;;AAEF,SAAK9B,SAAL;AACE,UAAMkC,UAAU,GAAG7B,IAAI,CAACY,MAAM,CAACX,MAAR,EAAgBe,MAAM,CAACC,MAAP,CAAcZ,KAAK,CAACM,KAAD,CAAnB,CAAhB,CAAvB;AACA,+BAAYkB,UAAZ;;AAEF;AACE,aAAOlB,KAAP;AAnCJ;AAqCD","sourcesContent":["import { GET_POST, GET_POSTS, SORT_POST, VOTE_POST, DELETE_POST, CREATE_POST, UPDATE_POST } from '../actions/posts'\n\nconst sort = (sortBy = 'timestamp', arr = []) => ( arr.sort((p, b) => p[sortBy] - b[sortBy]));\nconst clone = obj => JSON.parse(JSON.stringify(obj));\n\nexport default function posts (state = {}, action) {\n  switch(action.type) {\n\n    case GET_POST :\n      return { post: action.post }\n\n    case GET_POSTS :\n      const get_posts = sort(action.sortBy, action.posts)\n      return { ...get_posts }\n      \n    case DELETE_POST :\n      return { ...Object.values(state).flat().filter(s => s.id !== action.id) }\n\n    case CREATE_POST :\n      const create_posts = sort(action.sortBy, Object.values(state).concat(action.post))\n      return { ...create_posts };\n\n    case UPDATE_POST :\n      const updated_posts = sort(action.sortBy, Object.values(state).filter(p => p.id !== action.post.id).concat(action.post))\n      return { ...updated_posts };\n\n    case VOTE_POST :\n      let arrState = sort('timestamp', Object.values(clone(state)) );\n      arrState.forEach(p => {\n        if (p.id === action.id) {\n          p.voteScore += action.vote === 'upVote' ? 1 : -1;\n        }\n      });\n      \n      return { ...arrState };\n\n    case SORT_POST :\n      const sort_posts = sort(action.sortBy, Object.values(clone(state)) )\n      return { ...sort_posts };\n\n    default :\n      return state\n  }\n}\n\n"]},"metadata":{},"sourceType":"module"}