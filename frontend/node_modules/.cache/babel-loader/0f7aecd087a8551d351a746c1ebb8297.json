{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.LoadingBar = exports.TERMINATING_ANIMATION_TIME = exports.ANIMATION_TIME = exports.PROGRESS_INCREASE = exports.MAX_PROGRESS = exports.UPDATE_TIME = undefined;\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _reactRedux = require('react-redux');\n\nvar _loading_bar_ducks = require('./loading_bar_ducks');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar UPDATE_TIME = exports.UPDATE_TIME = 200;\nvar MAX_PROGRESS = exports.MAX_PROGRESS = 99;\nvar PROGRESS_INCREASE = exports.PROGRESS_INCREASE = 10;\nvar ANIMATION_TIME = exports.ANIMATION_TIME = UPDATE_TIME * 4;\nvar TERMINATING_ANIMATION_TIME = exports.TERMINATING_ANIMATION_TIME = UPDATE_TIME / 2;\nvar initialState = {\n  terminatingAnimationTimeout: null,\n  percent: 0,\n  progressInterval: null\n};\n\nvar LoadingBar = exports.LoadingBar = function (_Component) {\n  _inherits(LoadingBar, _Component);\n\n  function LoadingBar() {\n    var _ref;\n\n    var _temp, _this, _ret;\n\n    _classCallCheck(this, LoadingBar);\n\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = LoadingBar.__proto__ || Object.getPrototypeOf(LoadingBar)).call.apply(_ref, [this].concat(args))), _this), _this.state = _extends({}, initialState, {\n      hasMounted: false\n    }), _this.shouldStart = function (props, nextProps) {\n      return props.loading === 0 && nextProps.loading > 0;\n    }, _this.shouldStop = function (state, nextProps) {\n      return state.progressInterval && nextProps.loading === 0;\n    }, _this.newPercent = function (percent, progressIncrease) {\n      // Use cos as a smoothing function\n      // Can be any function to slow down progress near the 100%\n      var smoothedProgressIncrease = progressIncrease * Math.cos(percent * (Math.PI / 2 / 100));\n      return percent + smoothedProgressIncrease;\n    }, _this.simulateProgress = function () {\n      _this.setState(function (prevState, _ref2) {\n        var maxProgress = _ref2.maxProgress,\n            progressIncrease = _ref2.progressIncrease;\n        var progressInterval = prevState.progressInterval,\n            percent = prevState.percent,\n            terminatingAnimationTimeout = prevState.terminatingAnimationTimeout;\n\n        var newPercent = _this.newPercent(percent, progressIncrease);\n\n        if (percent === 100) {\n          clearInterval(progressInterval);\n          terminatingAnimationTimeout = setTimeout(_this.resetProgress, TERMINATING_ANIMATION_TIME);\n          progressInterval = null;\n        } else if (newPercent <= maxProgress) {\n          percent = newPercent;\n        }\n\n        return {\n          percent: percent,\n          progressInterval: progressInterval,\n          terminatingAnimationTimeout: terminatingAnimationTimeout\n        };\n      });\n    }, _this.resetProgress = function () {\n      _this.setState(initialState);\n    }, _temp), _possibleConstructorReturn(_this, _ret);\n  }\n\n  _createClass(LoadingBar, [{\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      // Re-render the component after mount to fix problems with SSR and CSP.\n      //\n      // Apps that use Server Side Rendering and has Content Security Policy\n      // for style that doesn't allow inline styles should render an empty div\n      // and replace it with the actual Loading Bar after mount\n      // See: https://github.com/mironov/react-redux-loading-bar/issues/39\n      //\n      // eslint-disable-next-line react/no-did-mount-set-state\n      this.setState({\n        hasMounted: true\n      });\n\n      if (this.props.loading > 0) {\n        this.launch();\n      }\n    }\n  }, {\n    key: 'componentWillReceiveProps',\n    value: function componentWillReceiveProps(nextProps) {\n      var _this2 = this;\n\n      if (this.shouldStart(this.props, nextProps)) {\n        this.launch();\n        return;\n      }\n\n      this.setState(function (prevState, props) {\n        if (_this2.shouldStop(prevState, nextProps)) {\n          if (prevState.percent === 0 && !props.showFastActions) {\n            // not even shown yet because the action finished quickly after start\n            clearInterval(prevState.progressInterval);\n            return initialState;\n          } // should progress to 100 percent\n\n\n          return {\n            percent: 100\n          };\n        }\n\n        return null;\n      });\n    }\n  }, {\n    key: 'componentWillUnmount',\n    value: function componentWillUnmount() {\n      clearInterval(this.state.progressInterval);\n      clearTimeout(this.state.terminatingAnimationTimeout);\n    }\n  }, {\n    key: 'shouldShow',\n    value: function shouldShow() {\n      return this.state.percent > 0 && this.state.percent <= 100;\n    }\n  }, {\n    key: 'launch',\n    value: function launch() {\n      var _this3 = this;\n\n      this.setState(function (prevState, _ref3) {\n        var updateTime = _ref3.updateTime;\n        var progressInterval = prevState.progressInterval;\n        var terminatingAnimationTimeout = prevState.terminatingAnimationTimeout,\n            percent = prevState.percent;\n        var loadingBarNotShown = !progressInterval;\n        var terminatingAnimationGoing = percent === 100;\n\n        if (loadingBarNotShown) {\n          progressInterval = setInterval(_this3.simulateProgress, updateTime);\n        }\n\n        if (terminatingAnimationGoing) {\n          clearTimeout(terminatingAnimationTimeout);\n        }\n\n        return {\n          progressInterval: progressInterval,\n          percent: 0\n        };\n      });\n    }\n  }, {\n    key: 'buildStyle',\n    value: function buildStyle() {\n      var animationTime = this.state.percent !== 100 ? ANIMATION_TIME : TERMINATING_ANIMATION_TIME;\n      var style = {\n        opacity: '1',\n        transform: 'scaleX(' + this.state.percent / 100 + ')',\n        transformOrigin: 'left',\n        transition: 'transform ' + animationTime + 'ms linear',\n        width: '100%',\n        willChange: 'transform, opacity' // Use default styling if there's no CSS class applied\n\n      };\n\n      if (!this.props.className) {\n        style.height = '3px';\n        style.backgroundColor = 'red';\n        style.position = 'absolute';\n      }\n\n      if (this.shouldShow()) {\n        style.opacity = '1';\n      } else {\n        style.opacity = '0';\n      }\n\n      return _extends({}, style, this.props.style);\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      // In order not to violate strict style CSP it's better to make\n      // an extra re-render after component mount\n      if (!this.state.hasMounted) {\n        return _react2.default.createElement('div', null);\n      }\n\n      return _react2.default.createElement('div', null, _react2.default.createElement('div', {\n        style: this.buildStyle(),\n        className: this.props.className\n      }), _react2.default.createElement('div', {\n        style: {\n          display: 'table',\n          clear: 'both'\n        }\n      }));\n    }\n  }]);\n\n  return LoadingBar;\n}(_react.Component);\n\nLoadingBar.propTypes = {\n  className: _propTypes.string,\n  loading: _propTypes.number,\n  maxProgress: _propTypes.number,\n  progressIncrease: _propTypes.number,\n  showFastActions: _propTypes.bool,\n  updateTime: _propTypes.number,\n  scope: _propTypes.string,\n  style: _propTypes.object\n};\nLoadingBar.defaultProps = {\n  className: '',\n  loading: 0,\n  maxProgress: MAX_PROGRESS,\n  progressIncrease: PROGRESS_INCREASE,\n  showFastActions: false,\n  style: {},\n  updateTime: UPDATE_TIME,\n  scope: _loading_bar_ducks.DEFAULT_SCOPE\n};\n\nvar mapStateToProps = function mapStateToProps(state, ownProps) {\n  return {\n    loading: state.loadingBar[ownProps.scope || _loading_bar_ducks.DEFAULT_SCOPE]\n  };\n};\n\nexports.default = (0, _reactRedux.connect)(mapStateToProps)(LoadingBar);","map":null,"metadata":{},"sourceType":"script"}