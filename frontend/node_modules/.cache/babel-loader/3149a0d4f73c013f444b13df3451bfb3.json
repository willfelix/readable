{"ast":null,"code":"import _objectSpread from \"/Users/willfelix/Documents/code/study/projects-udacity-nanodegree/readable/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport { GET_POSTS, VOTE_POST, DELETE_POST, CREATE_POST, UPDATE_POST } from '../actions/posts';\nexport default function posts() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case GET_POSTS:\n      var get_posts = sort(action.sortBy, action.posts);\n      return _objectSpread({}, get_posts);\n\n    case DELETE_POST:\n      return _objectSpread({}, Object.values(state).flat().filter(function (s) {\n        return s.id !== action.id;\n      }));\n\n    case CREATE_POST:\n      var create_posts = sort(action.sortBy, Object.values(state).concat(action.post));\n      return _objectSpread({}, create_posts);\n\n    case UPDATE_POST:\n      var updated_posts = sort(action.sortBy, Object.values(state).filter(function (p) {\n        return p.id !== action.post.id;\n      }).concat(action.post));\n      return _objectSpread({}, updated_posts);\n\n    case VOTE_POST:\n      var arrState = Object.values(state);\n      var post = arrState.find(function (p) {\n        return p.id === action.id;\n      });\n      arrState = arrState.filter(function (p) {\n        return p.id !== action.id;\n      });\n      post.voteScore += action.vote === 'upVote' ? 1 : -1;\n      debugger;\n      arrState = sort(arrState.concat(post));\n      return _objectSpread({}, arrState);\n\n    default:\n      return state;\n  }\n}\n\nvar sort = function sort() {\n  var sortBy = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'timestamp';\n  var arr = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  debugger;\n  return arr.sort(function (p, b) {\n    return p[sortBy] - b[sortBy];\n  });\n};","map":{"version":3,"sources":["/Users/willfelix/Documents/code/study/projects-udacity-nanodegree/readable/frontend/src/reducers/posts.js"],"names":["GET_POSTS","VOTE_POST","DELETE_POST","CREATE_POST","UPDATE_POST","posts","state","action","type","get_posts","sort","sortBy","Object","values","flat","filter","s","id","create_posts","concat","post","updated_posts","p","arrState","find","voteScore","vote","arr","b"],"mappings":";AAAA,SAASA,SAAT,EAAoBC,SAApB,EAA+BC,WAA/B,EAA4CC,WAA5C,EAAyDC,WAAzD,QAA4E,kBAA5E;AAEA,eAAe,SAASC,KAAT,GAAoC;AAAA,MAApBC,KAAoB,uEAAZ,EAAY;AAAA,MAARC,MAAQ;;AACjD,UAAOA,MAAM,CAACC,IAAd;AACE,SAAKR,SAAL;AACE,UAAMS,SAAS,GAAGC,IAAI,CAACH,MAAM,CAACI,MAAR,EAAgBJ,MAAM,CAACF,KAAvB,CAAtB;AACA,+BAAYI,SAAZ;;AAEF,SAAKP,WAAL;AAEE,+BAAYU,MAAM,CAACC,MAAP,CAAcP,KAAd,EAAqBQ,IAArB,GAA4BC,MAA5B,CAAmC,UAAAC,CAAC;AAAA,eAAIA,CAAC,CAACC,EAAF,KAASV,MAAM,CAACU,EAApB;AAAA,OAApC,CAAZ;;AAEF,SAAKd,WAAL;AAEE,UAAMe,YAAY,GAAGR,IAAI,CAACH,MAAM,CAACI,MAAR,EAAgBC,MAAM,CAACC,MAAP,CAAcP,KAAd,EAAqBa,MAArB,CAA4BZ,MAAM,CAACa,IAAnC,CAAhB,CAAzB;AACA,+BAAYF,YAAZ;;AAEF,SAAKd,WAAL;AAEE,UAAMiB,aAAa,GAAGX,IAAI,CAACH,MAAM,CAACI,MAAR,EAAgBC,MAAM,CAACC,MAAP,CAAcP,KAAd,EAAqBS,MAArB,CAA4B,UAAAO,CAAC;AAAA,eAAIA,CAAC,CAACL,EAAF,KAASV,MAAM,CAACa,IAAP,CAAYH,EAAzB;AAAA,OAA7B,EAA0DE,MAA1D,CAAiEZ,MAAM,CAACa,IAAxE,CAAhB,CAA1B;AACA,+BAAYC,aAAZ;;AAEF,SAAKpB,SAAL;AAEE,UAAIsB,QAAQ,GAAGX,MAAM,CAACC,MAAP,CAAcP,KAAd,CAAf;AACA,UAAIc,IAAI,GAAGG,QAAQ,CAACC,IAAT,CAAc,UAAAF,CAAC;AAAA,eAAIA,CAAC,CAACL,EAAF,KAASV,MAAM,CAACU,EAApB;AAAA,OAAf,CAAX;AACAM,MAAAA,QAAQ,GAAGA,QAAQ,CAACR,MAAT,CAAgB,UAAAO,CAAC;AAAA,eAAIA,CAAC,CAACL,EAAF,KAASV,MAAM,CAACU,EAApB;AAAA,OAAjB,CAAX;AACAG,MAAAA,IAAI,CAACK,SAAL,IAAkBlB,MAAM,CAACmB,IAAP,KAAgB,QAAhB,GAA2B,CAA3B,GAA+B,CAAC,CAAlD;AAEA;AACAH,MAAAA,QAAQ,GAAGb,IAAI,CAACa,QAAQ,CAACJ,MAAT,CAAgBC,IAAhB,CAAD,CAAf;AAEA,+BAAYG,QAAZ;;AAEF;AACE,aAAOjB,KAAP;AAhCJ;AAkCD;;AAED,IAAMI,IAAI,GAAG,SAAPA,IAAO,GAAoC;AAAA,MAAnCC,MAAmC,uEAA1B,WAA0B;AAAA,MAAbgB,GAAa,uEAAP,EAAO;AAC/C;AACA,SAAOA,GAAG,CAACjB,IAAJ,CAAS,UAACY,CAAD,EAAIM,CAAJ;AAAA,WAAUN,CAAC,CAACX,MAAD,CAAD,GAAYiB,CAAC,CAACjB,MAAD,CAAvB;AAAA,GAAT,CAAP;AACD,CAHD","sourcesContent":["import { GET_POSTS, VOTE_POST, DELETE_POST, CREATE_POST, UPDATE_POST } from '../actions/posts'\n\nexport default function posts (state = {}, action) {\n  switch(action.type) {\n    case GET_POSTS :\n      const get_posts = sort(action.sortBy, action.posts)\n      return { ...get_posts }\n      \n    case DELETE_POST :\n\n      return { ...Object.values(state).flat().filter(s => s.id !== action.id) }\n\n    case CREATE_POST :\n      \n      const create_posts = sort(action.sortBy, Object.values(state).concat(action.post))\n      return { ...create_posts };\n\n    case UPDATE_POST :\n\n      const updated_posts = sort(action.sortBy, Object.values(state).filter(p => p.id !== action.post.id).concat(action.post))\n      return { ...updated_posts };\n\n    case VOTE_POST :\n\n      let arrState = Object.values(state);\n      let post = arrState.find(p => p.id === action.id);\n      arrState = arrState.filter(p => p.id !== action.id);\n      post.voteScore += action.vote === 'upVote' ? 1 : -1;\n      \n      debugger\n      arrState = sort(arrState.concat(post));\n      \n      return { ...arrState };\n\n    default :\n      return state\n  }\n}\n\nconst sort = (sortBy = 'timestamp', arr = []) => {\n  debugger\n  return arr.sort((p, b) => p[sortBy] - b[sortBy])\n}"]},"metadata":{},"sourceType":"module"}