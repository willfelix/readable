{"ast":null,"code":"import _objectSpread from \"/Users/willfelix/Documents/code/study/projects-udacity-nanodegree/readable/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport { GET_POSTS, VOTE_POST, DELETE_POST, CREATE_POST, UPDATE_POST } from '../actions/posts';\n\nvar sort = function sort() {\n  var sortBy = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'timestamp';\n  var arr = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  return arr.sort(function (p, b) {\n    return p[sortBy] - b[sortBy];\n  });\n};\n\nexport default function posts() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case GET_POSTS:\n      var get_posts = sort(action.sortBy, action.posts);\n      return _objectSpread({}, get_posts);\n\n    case DELETE_POST:\n      return _objectSpread({}, Object.values(state).flat().filter(function (s) {\n        return s.id !== action.id;\n      }));\n\n    case CREATE_POST:\n      var create_posts = sort(action.sortBy, Object.values(state).concat(action.post));\n      return _objectSpread({}, create_posts);\n\n    case UPDATE_POST:\n      var updated_posts = sort(action.sortBy, Object.values(state).filter(function (p) {\n        return p.id !== action.post.id;\n      }).concat(action.post));\n      return _objectSpread({}, updated_posts);\n\n    case VOTE_POST:\n      var arrState = Object.values(state);\n      var post = arrState.find(function (p) {\n        return p.id === action.id;\n      });\n      arrState = arrState.filter(function (p) {\n        return p.id !== action.id;\n      });\n      post.voteScore += action.vote === 'upVote' ? 1 : -1;\n      arrState = sort('timestamp', arrState.concat(post));\n      return _objectSpread({}, arrState);\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["/Users/willfelix/Documents/code/study/projects-udacity-nanodegree/readable/frontend/src/reducers/posts.js"],"names":["GET_POSTS","VOTE_POST","DELETE_POST","CREATE_POST","UPDATE_POST","sort","sortBy","arr","p","b","posts","state","action","type","get_posts","Object","values","flat","filter","s","id","create_posts","concat","post","updated_posts","arrState","find","voteScore","vote"],"mappings":";AAAA,SAASA,SAAT,EAAoBC,SAApB,EAA+BC,WAA/B,EAA4CC,WAA5C,EAAyDC,WAAzD,QAA4E,kBAA5E;;AAEA,IAAMC,IAAI,GAAG,SAAPA,IAAO;AAAA,MAACC,MAAD,uEAAU,WAAV;AAAA,MAAuBC,GAAvB,uEAA6B,EAA7B;AAAA,SAAsCA,GAAG,CAACF,IAAJ,CAAS,UAACG,CAAD,EAAIC,CAAJ;AAAA,WAAUD,CAAC,CAACF,MAAD,CAAD,GAAYG,CAAC,CAACH,MAAD,CAAvB;AAAA,GAAT,CAAtC;AAAA,CAAb;;AAEA,eAAe,SAASI,KAAT,GAAoC;AAAA,MAApBC,KAAoB,uEAAZ,EAAY;AAAA,MAARC,MAAQ;;AACjD,UAAOA,MAAM,CAACC,IAAd;AACE,SAAKb,SAAL;AACE,UAAMc,SAAS,GAAGT,IAAI,CAACO,MAAM,CAACN,MAAR,EAAgBM,MAAM,CAACF,KAAvB,CAAtB;AACA,+BAAYI,SAAZ;;AAEF,SAAKZ,WAAL;AAEE,+BAAYa,MAAM,CAACC,MAAP,CAAcL,KAAd,EAAqBM,IAArB,GAA4BC,MAA5B,CAAmC,UAAAC,CAAC;AAAA,eAAIA,CAAC,CAACC,EAAF,KAASR,MAAM,CAACQ,EAApB;AAAA,OAApC,CAAZ;;AAEF,SAAKjB,WAAL;AAEE,UAAMkB,YAAY,GAAGhB,IAAI,CAACO,MAAM,CAACN,MAAR,EAAgBS,MAAM,CAACC,MAAP,CAAcL,KAAd,EAAqBW,MAArB,CAA4BV,MAAM,CAACW,IAAnC,CAAhB,CAAzB;AACA,+BAAYF,YAAZ;;AAEF,SAAKjB,WAAL;AAEE,UAAMoB,aAAa,GAAGnB,IAAI,CAACO,MAAM,CAACN,MAAR,EAAgBS,MAAM,CAACC,MAAP,CAAcL,KAAd,EAAqBO,MAArB,CAA4B,UAAAV,CAAC;AAAA,eAAIA,CAAC,CAACY,EAAF,KAASR,MAAM,CAACW,IAAP,CAAYH,EAAzB;AAAA,OAA7B,EAA0DE,MAA1D,CAAiEV,MAAM,CAACW,IAAxE,CAAhB,CAA1B;AACA,+BAAYC,aAAZ;;AAEF,SAAKvB,SAAL;AAEE,UAAIwB,QAAQ,GAAGV,MAAM,CAACC,MAAP,CAAcL,KAAd,CAAf;AACA,UAAIY,IAAI,GAAGE,QAAQ,CAACC,IAAT,CAAc,UAAAlB,CAAC;AAAA,eAAIA,CAAC,CAACY,EAAF,KAASR,MAAM,CAACQ,EAApB;AAAA,OAAf,CAAX;AACAK,MAAAA,QAAQ,GAAGA,QAAQ,CAACP,MAAT,CAAgB,UAAAV,CAAC;AAAA,eAAIA,CAAC,CAACY,EAAF,KAASR,MAAM,CAACQ,EAApB;AAAA,OAAjB,CAAX;AACAG,MAAAA,IAAI,CAACI,SAAL,IAAkBf,MAAM,CAACgB,IAAP,KAAgB,QAAhB,GAA2B,CAA3B,GAA+B,CAAC,CAAlD;AACAH,MAAAA,QAAQ,GAAGpB,IAAI,CAAC,WAAD,EAAcoB,QAAQ,CAACH,MAAT,CAAgBC,IAAhB,CAAd,CAAf;AAEA,+BAAYE,QAAZ;;AAEF;AACE,aAAOd,KAAP;AA9BJ;AAgCD","sourcesContent":["import { GET_POSTS, VOTE_POST, DELETE_POST, CREATE_POST, UPDATE_POST } from '../actions/posts'\n\nconst sort = (sortBy = 'timestamp', arr = []) => ( arr.sort((p, b) => p[sortBy] - b[sortBy]));\n\nexport default function posts (state = {}, action) {\n  switch(action.type) {\n    case GET_POSTS :\n      const get_posts = sort(action.sortBy, action.posts)\n      return { ...get_posts }\n      \n    case DELETE_POST :\n\n      return { ...Object.values(state).flat().filter(s => s.id !== action.id) }\n\n    case CREATE_POST :\n      \n      const create_posts = sort(action.sortBy, Object.values(state).concat(action.post))\n      return { ...create_posts };\n\n    case UPDATE_POST :\n\n      const updated_posts = sort(action.sortBy, Object.values(state).filter(p => p.id !== action.post.id).concat(action.post))\n      return { ...updated_posts };\n\n    case VOTE_POST :\n\n      let arrState = Object.values(state);\n      let post = arrState.find(p => p.id === action.id);\n      arrState = arrState.filter(p => p.id !== action.id);\n      post.voteScore += action.vote === 'upVote' ? 1 : -1;\n      arrState = sort('timestamp', arrState.concat(post));\n      \n      return { ...arrState };\n\n    default :\n      return state\n  }\n}\n\n"]},"metadata":{},"sourceType":"module"}