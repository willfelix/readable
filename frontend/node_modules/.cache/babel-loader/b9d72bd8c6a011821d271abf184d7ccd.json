{"ast":null,"code":"import _toConsumableArray from \"/Users/willfelix/Documents/code/study/projects-udacity-nanodegree/readable/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport { GET_POSTS, SORT_POST, VOTE_POST, DELETE_POST, CREATE_POST, UPDATE_POST } from '../actions/posts';\n\nvar sort = function sort() {\n  var sortBy = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'timestamp';\n  var arr = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  return arr.sort(function (p, b) {\n    return p[sortBy] - b[sortBy];\n  });\n};\n\nvar clone = function clone(obj) {\n  return JSON.parse(JSON.stringify(obj));\n};\n\nexport default function posts() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case GET_POSTS:\n      return sort(action.sortBy, action.posts);\n\n    case DELETE_POST:\n      return state.filter(function (s) {\n        return s.id !== action.id;\n      });\n\n    case CREATE_POST:\n      return sort(action.sortBy, state.concat(action.post));\n\n    case UPDATE_POST:\n      return sort(action.sortBy, state.filter(function (p) {\n        return p.id !== action.post.id;\n      }).concat(action.post));\n\n    case SORT_POST:\n      return sort(action.sortBy, clone(state));\n\n    case VOTE_POST:\n      var arrState = sort('timestamp', clone(state));\n      arrState.forEach(function (p) {\n        if (p.id === action.id) {\n          p.voteScore += action.vote === 'upVote' ? 1 : -1;\n        }\n      });\n      return _toConsumableArray(arrState);\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["/Users/willfelix/Documents/code/study/projects-udacity-nanodegree/readable/frontend/src/reducers/posts.js"],"names":["GET_POSTS","SORT_POST","VOTE_POST","DELETE_POST","CREATE_POST","UPDATE_POST","sort","sortBy","arr","p","b","clone","obj","JSON","parse","stringify","posts","state","action","type","filter","s","id","concat","post","arrState","forEach","voteScore","vote"],"mappings":";AAAA,SAASA,SAAT,EAAoBC,SAApB,EAA+BC,SAA/B,EAA0CC,WAA1C,EAAuDC,WAAvD,EAAoEC,WAApE,QAAuF,kBAAvF;;AAEA,IAAMC,IAAI,GAAG,SAAPA,IAAO;AAAA,MAACC,MAAD,uEAAU,WAAV;AAAA,MAAuBC,GAAvB,uEAA6B,EAA7B;AAAA,SAAsCA,GAAG,CAACF,IAAJ,CAAS,UAACG,CAAD,EAAIC,CAAJ;AAAA,WAAUD,CAAC,CAACF,MAAD,CAAD,GAAYG,CAAC,CAACH,MAAD,CAAvB;AAAA,GAAT,CAAtC;AAAA,CAAb;;AACA,IAAMI,KAAK,GAAG,SAARA,KAAQ,CAAAC,GAAG;AAAA,SAAIC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,SAAL,CAAeH,GAAf,CAAX,CAAJ;AAAA,CAAjB;;AAEA,eAAe,SAASI,KAAT,GAAoC;AAAA,MAApBC,KAAoB,uEAAZ,EAAY;AAAA,MAARC,MAAQ;;AAClD,UAAOA,MAAM,CAACC,IAAd;AAEC,SAAKnB,SAAL;AACC,aAAOM,IAAI,CAACY,MAAM,CAACX,MAAR,EAAgBW,MAAM,CAACF,KAAvB,CAAX;;AAED,SAAKb,WAAL;AACC,aAAOc,KAAK,CAACG,MAAN,CAAa,UAAAC,CAAC;AAAA,eAAIA,CAAC,CAACC,EAAF,KAASJ,MAAM,CAACI,EAApB;AAAA,OAAd,CAAP;;AAED,SAAKlB,WAAL;AACC,aAAOE,IAAI,CAACY,MAAM,CAACX,MAAR,EAAgBU,KAAK,CAACM,MAAN,CAAaL,MAAM,CAACM,IAApB,CAAhB,CAAX;;AAED,SAAKnB,WAAL;AACC,aAAOC,IAAI,CAACY,MAAM,CAACX,MAAR,EAAgBU,KAAK,CAACG,MAAN,CAAa,UAAAX,CAAC;AAAA,eAAIA,CAAC,CAACa,EAAF,KAASJ,MAAM,CAACM,IAAP,CAAYF,EAAzB;AAAA,OAAd,EAA2CC,MAA3C,CAAkDL,MAAM,CAACM,IAAzD,CAAhB,CAAX;;AAED,SAAKvB,SAAL;AACC,aAAOK,IAAI,CAACY,MAAM,CAACX,MAAR,EAAgBI,KAAK,CAACM,KAAD,CAArB,CAAX;;AAED,SAAKf,SAAL;AACC,UAAIuB,QAAQ,GAAGnB,IAAI,CAAC,WAAD,EAAcK,KAAK,CAACM,KAAD,CAAnB,CAAnB;AACAQ,MAAAA,QAAQ,CAACC,OAAT,CAAiB,UAAAjB,CAAC,EAAI;AACrB,YAAIA,CAAC,CAACa,EAAF,KAASJ,MAAM,CAACI,EAApB,EAAwB;AACvBb,UAAAA,CAAC,CAACkB,SAAF,IAAeT,MAAM,CAACU,IAAP,KAAgB,QAAhB,GAA2B,CAA3B,GAA+B,CAAC,CAA/C;AACA;AACD,OAJD;AAMA,gCAAYH,QAAZ;;AAED;AACC,aAAOR,KAAP;AA5BF;AA8BA","sourcesContent":["import { GET_POSTS, SORT_POST, VOTE_POST, DELETE_POST, CREATE_POST, UPDATE_POST } from '../actions/posts'\n\nconst sort = (sortBy = 'timestamp', arr = []) => ( arr.sort((p, b) => p[sortBy] - b[sortBy]));\nconst clone = obj => JSON.parse(JSON.stringify(obj));\n\nexport default function posts (state = [], action) {\n\tswitch(action.type) {\n\n\t\tcase GET_POSTS :\n\t\t\treturn sort(action.sortBy, action.posts)\n\n\t\tcase DELETE_POST :\n\t\t\treturn state.filter(s => s.id !== action.id)\n\n\t\tcase CREATE_POST :\n\t\t\treturn sort(action.sortBy, state.concat(action.post))\n\n\t\tcase UPDATE_POST :\n\t\t\treturn sort(action.sortBy, state.filter(p => p.id !== action.post.id).concat(action.post))\n\n\t\tcase SORT_POST :\n\t\t\treturn sort(action.sortBy, clone(state))\n\n\t\tcase VOTE_POST :\n\t\t\tlet arrState = sort('timestamp', clone(state));\n\t\t\tarrState.forEach(p => {\n\t\t\t\tif (p.id === action.id) {\n\t\t\t\t\tp.voteScore += action.vote === 'upVote' ? 1 : -1;\n\t\t\t\t}\n\t\t\t});\n\n\t\t\treturn [ ...arrState ];\n\n\t\tdefault :\n\t\t\treturn state\n\t}\n}\n\n"]},"metadata":{},"sourceType":"module"}