{"ast":null,"code":"import _classCallCheck from \"/Users/willfelix/Documents/code/study/projects-udacity-nanodegree/readable/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/willfelix/Documents/code/study/projects-udacity-nanodegree/readable/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/willfelix/Documents/code/study/projects-udacity-nanodegree/readable/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/willfelix/Documents/code/study/projects-udacity-nanodegree/readable/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/willfelix/Documents/code/study/projects-udacity-nanodegree/readable/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/willfelix/Documents/code/study/projects-udacity-nanodegree/readable/frontend/src/pages/CommentFormPage.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { handleGetCommentsByPostId, handleUpdateComment } from '../actions/comments';\nimport PageNotFound from './PageNotFound';\n\nvar CommentFormPage =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(CommentFormPage, _Component);\n\n  function CommentFormPage(props) {\n    var _this;\n\n    _classCallCheck(this, CommentFormPage);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(CommentFormPage).call(this, props));\n    _this.state = {\n      body: ''\n    };\n\n    _this.handleSubmit = function (e) {\n      e.preventDefault();\n      var body = _this.state.body;\n      var _this$props = _this.props,\n          dispatch = _this$props.dispatch,\n          id = _this$props.id,\n          category = _this$props.category,\n          post = _this$props.post;\n      dispatch(handleUpdateComment(id, body));\n\n      _this.setState(function () {\n        return {\n          body: ''\n        };\n      });\n\n      _this.props.history.push(\"/\".concat(category, \"/\").concat(post.id, \"/\").concat(id));\n    };\n\n    var _post = props.match.params.post;\n    props.dispatch(handleGetCommentsByPostId(_post));\n    return _this;\n  }\n\n  _createClass(CommentFormPage, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.updateState();\n    }\n  }, {\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(props) {\n      this.updateState(props);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props2 = this.props,\n          comment = _this$props2.comment,\n          category = _this$props2.category,\n          post = _this$props2.post;\n      var body = this.state.body;\n      debugger;\n\n      if (!comment || !post) {\n        return React.createElement(PageNotFound, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 35\n          },\n          __self: this\n        });\n      }\n\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 39\n        },\n        __self: this\n      }, React.createElement(\"h3\", {\n        className: \"center\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 40\n        },\n        __self: this\n      }, \"Updating comment #\", comment.id), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 41\n        },\n        __self: this\n      }, React.createElement(\"hr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 42\n        },\n        __self: this\n      }), React.createElement(Link, {\n        to: \"/\".concat(category, \"/\").concat(post.id),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44\n        },\n        __self: this\n      }, post.title)), React.createElement(Link, {\n        to: \"/\".concat(category),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46\n        },\n        __self: this\n      }, React.createElement(\"small\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 47\n        },\n        __self: this\n      }, category)), React.createElement(\"hr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49\n        },\n        __self: this\n      })), React.createElement(\"form\", {\n        className: \"new-post\",\n        onSubmit: this.handleSubmit,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51\n        },\n        __self: this\n      }, React.createElement(\"textarea\", {\n        placeholder: \"Tell us more about this...\",\n        value: body,\n        onChange: function onChange(e) {\n          return _this2.setState({\n            body: e.target.value\n          });\n        },\n        className: \"textarea\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53\n        },\n        __self: this\n      }), React.createElement(\"button\", {\n        className: \"btn\",\n        type: \"submit\",\n        disabled: body === '',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59\n        },\n        __self: this\n      }, \"Submit\")));\n    }\n  }, {\n    key: \"updateState\",\n    value: function updateState(props) {\n      var _ref = props || this.props,\n          comment = _ref.comment;\n\n      if (comment) {\n        this.setState({\n          body: comment.body\n        });\n      }\n    }\n  }]);\n\n  return CommentFormPage;\n}(Component);\n\nvar mapStateToProps = function mapStateToProps(_ref2, props) {\n  var posts = _ref2.posts,\n      comments = _ref2.comments;\n  var _props$match$params = props.match.params,\n      comment = _props$match$params.comment,\n      post = _props$match$params.post,\n      category = _props$match$params.category;\n  debugger;\n  return {\n    id: comment,\n    post: posts.find(function (p) {\n      return p.id === post;\n    }),\n    comment: comments.find(function (c) {\n      return c.id === comment;\n    }),\n    category: category\n  };\n};\n\nexport default connect(mapStateToProps)(CommentFormPage);","map":{"version":3,"sources":["/Users/willfelix/Documents/code/study/projects-udacity-nanodegree/readable/frontend/src/pages/CommentFormPage.js"],"names":["React","Component","connect","Link","handleGetCommentsByPostId","handleUpdateComment","PageNotFound","CommentFormPage","props","state","body","handleSubmit","e","preventDefault","dispatch","id","category","post","setState","history","push","match","params","updateState","comment","title","target","value","mapStateToProps","posts","comments","find","p","c"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport { Link } from 'react-router-dom'\n\nimport { handleGetCommentsByPostId, handleUpdateComment } from '../actions/comments'\n\nimport PageNotFound from './PageNotFound';\n\nclass CommentFormPage extends Component {\n\t\n\tstate = { body: '' }\n\n\tconstructor(props) {\n\t\tsuper(props)\n\n\t\tconst post = props.match.params.post;\n\t\tprops.dispatch( handleGetCommentsByPostId(post) )\n\t}\n\n\tcomponentDidMount() {\n\t\tthis.updateState();\n\t}\n\n\tcomponentWillReceiveProps (props) {\n\t\tthis.updateState(props);\n  \t}\n\n\trender() {\n\t\tconst { comment, category, post } = this.props;\n\t\tlet { body } = this.state;\n\n\t\tdebugger\n\n\t\tif (!comment || !post) {\n\t\t\treturn <PageNotFound />\n\t\t}\n\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<h3 className='center'>Updating comment #{comment.id}</h3>\n\t\t\t\t<div>\n\t\t\t\t\t<hr />\n\t\t\t\t\t\t<Link to={`/${category}/${post.id}`}>\n\t\t\t\t\t\t\t<p>{post.title}</p>\n\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t<Link to={`/${category}`}>\n\t\t\t\t\t\t\t<small>{category}</small>\n\t\t\t\t\t\t</Link>\n\t\t\t\t\t<hr />\n\t\t\t\t</div>\n\t\t\t\t<form className='new-post' onSubmit={this.handleSubmit}>\n\t\t\t\t\t\n\t\t\t\t\t<textarea\n\t\t\t\t\t\tplaceholder=\"Tell us more about this...\"\n\t\t\t\t\t\tvalue={body}\n\t\t\t\t\t\tonChange={ (e) => this.setState({ body: e.target.value }) }\n\t\t\t\t\t\tclassName='textarea' />\n\n\t\t\t\t\t<button className='btn' type='submit' disabled={body === ''}>\n\t\t\t\t\t\tSubmit\n\t\t\t\t\t</button>\n\t\t\t\t</form>\n\t\t\t</div>\n\t\t)\n\t}\n\n\thandleSubmit = (e) => {\n\t\te.preventDefault()\n\n\t\tconst { body } = this.state\n\t\tconst { dispatch, id, category, post } = this.props\n\n\t\tdispatch( handleUpdateComment(id, body) );\n\n\t\tthis.setState(() => ({ body: '' }))\n\t\tthis.props.history.push(`/${category}/${post.id}/${id}`);\n\t}\n\n\tupdateState(props) {\n\t\tconst { comment } = props || this.props;\n\t\tif (comment) {\n\t\t\tthis.setState({ body: comment.body, })\n\t\t}\n\t}\n\t\n}\n\nconst mapStateToProps = ({ posts, comments }, props) => {\n\tconst { comment, post, category } = props.match.params\n\n\tdebugger\n\n\treturn {\n\t\tid: comment,\n\t\tpost: posts.find(p => p.id === post),\n\t\tcomment: comments.find(c => c.id === comment),\n\t\tcategory\n\t}\n}\n\nexport default connect(mapStateToProps)(CommentFormPage);"]},"metadata":{},"sourceType":"module"}