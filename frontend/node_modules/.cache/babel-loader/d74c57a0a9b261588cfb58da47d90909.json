{"ast":null,"code":"import _toConsumableArray from \"/Users/willfelix/Documents/code/study/projects-udacity-nanodegree/readable/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport { VOTE_COMMENT, UPDATE_COMMENT, GET_COMMENTS, DELETE_COMMENT, CREATE_COMMENT } from '../actions/comments';\nexport default function comments() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case GET_COMMENTS:\n      return _toConsumableArray(action.comments);\n\n    case DELETE_COMMENT:\n      return _toConsumableArray(state.filter(function (s) {\n        return s.id !== action.id;\n      }));\n\n    case CREATE_COMMENT:\n      return [].concat(_toConsumableArray(state), [action.comment]);\n\n    case VOTE_COMMENT:\n      var arrState = _toConsumableArray(state);\n\n      arrState.forEach(function (p) {\n        if (p.id === action.id) {\n          p.voteScore += action.vote === 'upVote' ? 1 : -1;\n        }\n      });\n      return _toConsumableArray(arrState);\n\n    case UPDATE_COMMENT:\n      return state.filter(function (p) {\n        return p.id !== action.post.id;\n      }).concat(action.post);\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["/Users/willfelix/Documents/code/study/projects-udacity-nanodegree/readable/frontend/src/reducers/comments.js"],"names":["VOTE_COMMENT","UPDATE_COMMENT","GET_COMMENTS","DELETE_COMMENT","CREATE_COMMENT","comments","state","action","type","filter","s","id","comment","arrState","forEach","p","voteScore","vote","post","concat"],"mappings":";AAAA,SAASA,YAAT,EAAuBC,cAAvB,EAAuCC,YAAvC,EAAqDC,cAArD,EAAqEC,cAArE,QAA2F,qBAA3F;AAEA,eAAe,SAASC,QAAT,GAAuC;AAAA,MAApBC,KAAoB,uEAAZ,EAAY;AAAA,MAARC,MAAQ;;AAErD,UAAOA,MAAM,CAACC,IAAd;AACC,SAAKN,YAAL;AACC,gCAAYK,MAAM,CAACF,QAAnB;;AAED,SAAKF,cAAL;AACC,gCAAYG,KAAK,CAACG,MAAN,CAAa,UAAAC,CAAC;AAAA,eAAIA,CAAC,CAACC,EAAF,KAASJ,MAAM,CAACI,EAApB;AAAA,OAAd,CAAZ;;AAED,SAAKP,cAAL;AACC,0CACIE,KADJ,IAECC,MAAM,CAACK,OAFR;;AAKD,SAAKZ,YAAL;AACC,UAAIa,QAAQ,sBAAQP,KAAR,CAAZ;;AACAO,MAAAA,QAAQ,CAACC,OAAT,CAAiB,UAAAC,CAAC,EAAI;AACrB,YAAIA,CAAC,CAACJ,EAAF,KAASJ,MAAM,CAACI,EAApB,EAAwB;AACvBI,UAAAA,CAAC,CAACC,SAAF,IAAeT,MAAM,CAACU,IAAP,KAAgB,QAAhB,GAA2B,CAA3B,GAA+B,CAAC,CAA/C;AACA;AACD,OAJD;AAMA,gCAAYJ,QAAZ;;AAED,SAAKZ,cAAL;AACC,aAAOK,KAAK,CAACG,MAAN,CAAa,UAAAM,CAAC;AAAA,eAAIA,CAAC,CAACJ,EAAF,KAASJ,MAAM,CAACW,IAAP,CAAYP,EAAzB;AAAA,OAAd,EAA2CQ,MAA3C,CAAkDZ,MAAM,CAACW,IAAzD,CAAP;;AAED;AACC,aAAOZ,KAAP;AA3BF;AA8BA","sourcesContent":["import { VOTE_COMMENT, UPDATE_COMMENT, GET_COMMENTS, DELETE_COMMENT, CREATE_COMMENT } from '../actions/comments'\n\nexport default function comments (state = [], action) {\n\n\tswitch(action.type) {\n\t\tcase GET_COMMENTS :\n\t\t\treturn [ ...action.comments ]\n\n\t\tcase DELETE_COMMENT :\n\t\t\treturn [ ...state.filter(s => s.id !== action.id) ]\n\n\t\tcase CREATE_COMMENT :\n\t\t\treturn [ \n\t\t\t\t...state, \n\t\t\t\taction.comment\n\t\t\t];\n\n\t\tcase VOTE_COMMENT :\n\t\t\tlet arrState = [ ...state ]\n\t\t\tarrState.forEach(p => {\n\t\t\t\tif (p.id === action.id) {\n\t\t\t\t\tp.voteScore += action.vote === 'upVote' ? 1 : -1;\n\t\t\t\t}\n\t\t\t});\n\n\t\t\treturn [ ...arrState ];\n\n\t\tcase UPDATE_COMMENT :\n\t\t\treturn state.filter(p => p.id !== action.post.id).concat(action.post)\n\n\t\tdefault :\n\t\t\treturn state\n\t}\n\n}"]},"metadata":{},"sourceType":"module"}