{"ast":null,"code":"import * as api from '../utils/api';\nimport { showLoading, hideLoading } from 'react-redux-loading';\nexport var GET_COMMENTS = 'GET_COMMENTS';\nexport var CREATE_COMMENT = 'CREATE_COMMENT';\nexport var DELETE_COMMENT = 'DELETE_COMMENT';\n\nvar deleteComment = function deleteComment(id) {\n  return {\n    type: DELETE_COMMENT,\n    id: id\n  };\n};\n\nvar createComment = function createComment(post) {\n  return {\n    type: CREATE_COMMENT,\n    post: post\n  };\n};\n\nvar getComments = function getComments(id, comments) {\n  return {\n    type: GET_COMMENTS,\n    id: id,\n    comments: comments\n  };\n};\n\nexport function handleDeleteComment(id) {\n  return function (dispatch) {\n    dispatch(deleteComment(id));\n    return api.deleteComment(id);\n  };\n}\nexport function handleGetCommentsByPostId(id) {\n  return function (dispatch) {\n    return api.getCommentsByPostId(id).then(function (comments) {\n      debugger;\n      return dispatch(getComments(id, comments));\n    });\n  };\n}\nexport function handleCreateComment(title, body, category) {\n  return function (dispatch, getState) {\n    var _getState = getState(),\n        authedUser = _getState.authedUser;\n\n    var timestamp = Date.now();\n    dispatch(showLoading());\n    return api.createComment({\n      id: timestamp.toString(),\n      timestamp: timestamp,\n      title: title,\n      body: body,\n      category: category,\n      author: authedUser\n    }).then(function (post) {\n      return dispatch(createComment(post));\n    }).then(function () {\n      return dispatch(hideLoading());\n    });\n  };\n}","map":{"version":3,"sources":["/Users/willfelix/Documents/code/study/projects-udacity-nanodegree/readable/frontend/src/actions/comments.js"],"names":["api","showLoading","hideLoading","GET_COMMENTS","CREATE_COMMENT","DELETE_COMMENT","deleteComment","id","type","createComment","post","getComments","comments","handleDeleteComment","dispatch","handleGetCommentsByPostId","getCommentsByPostId","then","handleCreateComment","title","body","category","getState","authedUser","timestamp","Date","now","toString","author"],"mappings":"AAAA,OAAO,KAAKA,GAAZ,MAAqB,cAArB;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,qBAAzC;AAEA,OAAO,IAAMC,YAAY,GAAG,cAArB;AACP,OAAO,IAAMC,cAAc,GAAG,gBAAvB;AACP,OAAO,IAAMC,cAAc,GAAG,gBAAvB;;AAEP,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,CAACC,EAAD;AAAA,SAAS;AAC9BC,IAAAA,IAAI,EAAEH,cADwB;AAE9BE,IAAAA,EAAE,EAAFA;AAF8B,GAAT;AAAA,CAAtB;;AAKA,IAAME,aAAa,GAAG,SAAhBA,aAAgB,CAACC,IAAD;AAAA,SAAW;AAChCF,IAAAA,IAAI,EAAEJ,cAD0B;AAEhCM,IAAAA,IAAI,EAAJA;AAFgC,GAAX;AAAA,CAAtB;;AAKA,IAAMC,WAAW,GAAG,SAAdA,WAAc,CAACJ,EAAD,EAAKK,QAAL;AAAA,SAAmB;AACtCJ,IAAAA,IAAI,EAAEL,YADgC;AAEtCI,IAAAA,EAAE,EAAFA,EAFsC;AAGtCK,IAAAA,QAAQ,EAARA;AAHsC,GAAnB;AAAA,CAApB;;AAMA,OAAO,SAASC,mBAAT,CAA8BN,EAA9B,EAAkC;AACxC,SAAO,UAACO,QAAD,EAAc;AACpBA,IAAAA,QAAQ,CAAER,aAAa,CAACC,EAAD,CAAf,CAAR;AACA,WAAOP,GAAG,CAACM,aAAJ,CAAkBC,EAAlB,CAAP;AACA,GAHD;AAIA;AAED,OAAO,SAASQ,yBAAT,CAAoCR,EAApC,EAAwC;AAC9C,SAAO,UAACO,QAAD,EAAc;AACpB,WAAOd,GAAG,CAACgB,mBAAJ,CAAwBT,EAAxB,EACFU,IADE,CACG,UAAAL,QAAQ,EAAI;AACjB;AACA,aAAOE,QAAQ,CAAEH,WAAW,CAACJ,EAAD,EAAKK,QAAL,CAAb,CAAf;AACA,KAJE,CAAP;AAKA,GAND;AAOA;AAED,OAAO,SAASM,mBAAT,CAA8BC,KAA9B,EAAqCC,IAArC,EAA2CC,QAA3C,EAAqD;AAC3D,SAAO,UAACP,QAAD,EAAWQ,QAAX,EAAwB;AAAA,oBACPA,QAAQ,EADD;AAAA,QACtBC,UADsB,aACtBA,UADsB;;AAE9B,QAAMC,SAAS,GAAGC,IAAI,CAACC,GAAL,EAAlB;AAEAZ,IAAAA,QAAQ,CAACb,WAAW,EAAZ,CAAR;AAEA,WAAOD,GAAG,CAACS,aAAJ,CAAkB;AACxBF,MAAAA,EAAE,EAAEiB,SAAS,CAACG,QAAV,EADoB;AAExBH,MAAAA,SAAS,EAATA,SAFwB;AAGxBL,MAAAA,KAAK,EAALA,KAHwB;AAIxBC,MAAAA,IAAI,EAAJA,IAJwB;AAKxBC,MAAAA,QAAQ,EAARA,QALwB;AAMxBO,MAAAA,MAAM,EAAEL;AANgB,KAAlB,EAQNN,IARM,CAQD,UAAAP,IAAI;AAAA,aAAII,QAAQ,CAAEL,aAAa,CAACC,IAAD,CAAf,CAAZ;AAAA,KARH,EASNO,IATM,CASD;AAAA,aAAMH,QAAQ,CAAEZ,WAAW,EAAb,CAAd;AAAA,KATC,CAAP;AAUA,GAhBD;AAiBA","sourcesContent":["import * as api from '../utils/api'\nimport { showLoading, hideLoading } from 'react-redux-loading'\n\nexport const GET_COMMENTS = 'GET_COMMENTS'\nexport const CREATE_COMMENT = 'CREATE_COMMENT'\nexport const DELETE_COMMENT = 'DELETE_COMMENT'\n\nconst deleteComment = (id) => ({\n\ttype: DELETE_COMMENT,\n\tid\n});\n\nconst createComment = (post) => ({\n\ttype: CREATE_COMMENT,\n\tpost\n});\n\nconst getComments = (id, comments) => ({\n\ttype: GET_COMMENTS,\n\tid,\n\tcomments\n});\n\nexport function handleDeleteComment (id) {\n\treturn (dispatch) => {\n\t\tdispatch( deleteComment(id) );\n\t\treturn api.deleteComment(id);\n\t}\n}\n\nexport function handleGetCommentsByPostId (id) {\n\treturn (dispatch) => {\n\t\treturn api.getCommentsByPostId(id)\n\t\t\t\t  .then(comments => {\n\t\t\t\t  \tdebugger\n\t\t\t\t  \treturn dispatch( getComments(id, comments) )\n\t\t\t\t  })\n\t}\n}\n\nexport function handleCreateComment (title, body, category) {\n\treturn (dispatch, getState) => {\n\t\tconst { authedUser } = getState()\n\t\tconst timestamp = Date.now();\n\n\t\tdispatch(showLoading())\n\n\t\treturn api.createComment({\n\t\t\tid: timestamp.toString(),\n\t\t\ttimestamp,\n\t\t\ttitle,\n\t\t\tbody,\n\t\t\tcategory,\n\t\t\tauthor: authedUser\n\t\t})\n\t\t.then(post => dispatch( createComment(post) ))\n\t\t.then(() => dispatch( hideLoading() ))\n\t}\n}"]},"metadata":{},"sourceType":"module"}